---
- name: Include default variables
  ansible.builtin.include_vars:
    file: ../defaults/main.yml

- name: Import Random String Generator Tasks
  ansible.builtin.import_tasks: ../../../generate_random_string.yml

- name: Set dynamic name values with random string
  ansible.builtin.set_fact:
    group_name: "{{ group_name }}_{{ random_string }}"
    description: "{{ description }}_{{ random_string }}"

- name: Ensure required environment variables are set
  ansible.builtin.fail:
    msg: "{{ env_var }} is not defined as environment variable"
  when: lookup('env', env_var) is none
  loop:
    - ZIA_USERNAME
    - ZIA_PASSWORD
    - ZIA_API_KEY
    - ZIA_CLOUD
  loop_control:
    loop_var: env_var

- name: Ensure ZIA Credential environment variables are set
  ansible.builtin.set_fact:
    zia_cloud:
      username: "{{ lookup('env', 'ZIA_USERNAME') }}"
      password: "{{ lookup('env', 'ZIA_PASSWORD') }}"
      api_key: "{{ lookup('env', 'ZIA_API_KEY') }}"
      cloud: "{{ lookup('env', 'ZIA_CLOUD') | default(omit) }}"
  no_log: true

- name: Main block to Test Network Application Group Configuration
  block:
    - name: Ensure Network Application Group (leftover)
      zscaler.ziacloud.zia_cloud_firewall_network_application_group:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ name }}"
        description: "{{ description }}"
        network_applications: "{{ network_applications }}"
      register: result

  rescue:
    - name: Handle errors
      ansible.builtin.debug:
        msg: An error occurred.

  always:
    - name: Cleanup operations
      ansible.builtin.debug:
        msg: Cleanup complete.

    - name: Ensure Network Application Group is absent
      zscaler.ziacloud.zia_cloud_firewall_network_application_group:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ name }}"
        description: "{{ description }}"
        network_applications: "{{ network_applications }}"
      register: result

    - name: Verify Network Application Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined

    - name: Ensure Network Application Group is (Present)
      zscaler.ziacloud.zia_cloud_firewall_network_application_group:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ name }}"
        description: "{{ description }}"
        network_applications: "{{ network_applications }}"
      register: result

    - name: Verify Network Application Group is present
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data.name is defined

    - name: Ensure Network Application Group (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_network_application_group:
        provider: "{{ zia_cloud }}"
        state: present
        name: "{{ name }}"
        description: "{{ description }}"
        network_applications: "{{ network_applications }}"
      register: result

    - name: Ensure Network Application Group is absent (idempotency check)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Fetch all Network Application Group
      zscaler.ziacloud.zia_cloud_firewall_network_application_group_facts:
        provider: "{{ zia_cloud }}"
      register: result

    - name: Ensure all Network Application Group found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data[0] is defined

    - name: Fetch this Network Application Group
      zscaler.ziacloud.zia_cloud_firewall_network_application_group_facts:
        provider: "{{ zia_cloud }}"
        name: "{{ name }}"
      register: result

    - name: Ensure this Network Application Group is found
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data[0].name is defined
          - result.data[0].name == name

    - name: Give the ZIA Cloud a 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5

    - name: Delete Network Application Group
      zscaler.ziacloud.zia_cloud_firewall_network_application_group:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ name }}"
        description: "{{ description }}"
        network_applications: "{{ network_applications }}"
      register: result

    - name: Verify Network Application Group is Deleted
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete Network Application Group (again; idempotency check)
      zscaler.ziacloud.zia_cloud_firewall_network_application_group:
        provider: "{{ zia_cloud }}"
        state: absent
        name: "{{ name }}"
        description: "{{ description }}"
        network_applications: "{{ network_applications }}"
      register: result

    - name: Verify Network Application Group is absent
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
