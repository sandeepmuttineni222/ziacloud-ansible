---
- name: List all DLP Web Rules
  zscaler.ziacloud.zia_dlp_web_rules_facts:
    provider: "{{ zia_cloud }}"
  register: all_dlp_rules

- name: Delete all DLP Web Rules üí•
  zscaler.ziacloud.zia_dlp_web_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_dlp_rules.data }}"
  when: all_dlp_rules.data is defined

- name: List all Cloud Firewall Rules
  zscaler.ziacloud.zia_cloud_firewall_filtering_rule_facts:
    provider: "{{ zia_cloud }}"
  register: all_firewall_rules

- name: Delete all Cloud Firewall Rules üí•
  zscaler.ziacloud.zia_cloud_firewall_filtering_rule:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_firewall_rules.data }}"
  when: all_firewall_rules.data is defined

- name: List all URL Filtering Rules
  zscaler.ziacloud.zia_url_filtering_rule_facts:
    provider: "{{ zia_cloud }}"
  register: all_url_rules

- name: Delete all URL Filtering Rules üí•
  zscaler.ziacloud.zia_url_filtering_rules:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_url_rules.data }}"
  when: all_url_rules.data is defined

- name: List all Locations
  zscaler.ziacloud.zia_location_management_facts:
    provider: "{{ zia_cloud }}"
  register: all_locations

- name: Delete all Locations üí•
  zscaler.ziacloud.zia_location_management:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_locations.data }}"
  when: all_locations.data is defined

- name: List all DLP Engines
  zscaler.ziacloud.zia_dlp_engine_facts:
    provider: "{{ zia_cloud }}"
  register: all_engines

- name: Delete all DLP Engines üí•
  zscaler.ziacloud.zia_dlp_engine:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_engines.data }}"
  when: all_engines.data is defined

- name: List all DLP Dictionaries
  zscaler.ziacloud.zia_dlp_dictionaries_facts:
    provider: "{{ zia_cloud }}"
  register: all_dictionaries

- name: Delete all DLP Dictionaries üí•
  zscaler.ziacloud.zia_dlp_dictionaries:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_dictionaries.data }}"
  when: all_dictionaries.data is defined

- name: List all Rule Labels
  zscaler.ziacloud.zia_rule_labels_facts:
    provider: "{{ zia_cloud }}"
  register: all_rule_labels

- name: Delete all Rule Labels üí•
  zscaler.ziacloud.zia_rule_labels:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_rule_labels.data }}"
  when: all_rule_labels.data is defined

- name: List all IP Destination Groups
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups_facts:
    provider: "{{ zia_cloud }}"
  register: all_ip_dest_groups

- name: Delete all IP Destination Groups üí•
  zscaler.ziacloud.zia_cloud_firewall_ip_destination_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_ip_dest_groups.data }}"
  when: all_ip_dest_groups.data is defined

- name: List all IP Source Groups
  zscaler.ziacloud.zia_cloud_firewall_ip_source_groups_facts:
    provider: "{{ zia_cloud }}"
  register: all_ip_source_groups

- name: Delete all IP Source Groups üí•
  zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
    ip_addresses: "{{ item.ip_addresses }}"
  loop: "{{ all_ip_source_groups.data }}"
  when: all_ip_source_groups.data is defined

- name: List all Network Services
  zscaler.ziacloud.zia_cloud_firewall_network_services_facts:
    provider: "{{ zia_cloud }}"
  register: all_network_services

- name: Delete all Network Services üí•
  zscaler.ziacloud.zia_cloud_firewall_ip_source_groups:
    provider: "{{ zia_cloud }}"
    state: absent
    name: "{{ item.name }}"
  loop: "{{ all_network_services.data | rejectattr('type', 'in', ['PREDEFINED', 'STANDARD']) | list }}"
  when: all_network_services.data is defined

- name: Set fact for each task status
  ansible.builtin.set_fact:
    dlp_web_rules_failed: "{{ all_dlp_rules.failed | default(false) }}"
    url_filtering_rules_failed: "{{ all_url_rules.failed | default(false) }}"
    firewall_rules_failed: "{{ all_firewall_rules.failed | default(false) }}"
    locations_failed: "{{ all_locations.failed | default(false) }}"
    dlp_engines_failed: "{{ all_engines.failed | default(false) }}"
    dlp_dictionaries_failed: "{{ all_dictionaries.failed | default(false) }}"
    rule_labels_failed: "{{ all_rule_labels.failed | default(false) }}"
    ip_dest_groups_failed: "{{ all_ip_dest_groups.failed | default(false) }}"
    ip_source_groups_failed: "{{ all_ip_source_groups.failed | default(false) }}"
    network_services_failed: "{{ all_network_services.failed | default(false) }}"

- name: Set fact for overall status
  ansible.builtin.set_fact:
    sweep_successful: >-
      {{
        not (
          firewall_rules_failed or
          dlp_web_rules_failed or
          url_filtering_rules_failed or
          locations_failed or
          dlp_engines_failed or
          dlp_dictionaries_failed or
          rule_labels_failed or
          ip_dest_groups_failed or
          ip_source_groups_failed or
          network_services_failed
        )
      }}

- name: Print success message ‚úÖ
  ansible.builtin.debug:
    msg: Tenant sweep successfully completed!
  when: sweep_successful

- name: Print failure message ‚ùå
  ansible.builtin.debug:
    msg: Tenant sweep incomplete. Please check the above logs for errors.
  when: not sweep_successful
